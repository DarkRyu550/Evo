
mat4[4] MatrixMultiply4(mat4[4] a, mat4[4] b) {
    mat4[4] result;

    result[0] = a[0] * b[0] + a[1] * b[2];
    result[1] = a[0] * b[1] + a[1] * b[3];
    result[2] = a[2] * b[0] + a[3] * b[2];
    result[3] = a[2] * b[1] + a[3] * b[3];

    return result;
}

mat4[4] MatrixAdd4(mat4[4] a, mat4[4] b) {
    mat4[4] result;

    result[0] = a[0] + b[0];
    result[1] = a[1] + b[1];
    result[2] = a[2] + b[2];
    result[3] = a[3] + b[3];

    return result;
}

mat4[4][4] MatrixUnpack16(mat4[16] a) {
    mat4[4][4] result;

    result[0][0] = a[0];
    result[0][1] = a[1];
    result[0][2] = a[4];
    result[0][3] = a[5];

    result[1][0] = a[2];
    result[1][1] = a[3];
    result[1][2] = a[6];
    result[1][2] = a[7];

    result[2][0] = a[8];
    result[2][1] = a[9];
    result[2][2] = a[12];
    result[2][3] = a[13];

    result[3][0] = a[10];
    result[3][1] = a[11];
    result[3][2] = a[14];
    result[3][2] = a[15];

    return result;
}

mat4[16] MatrixPack16(mat4[4][4] a) {
    mat4[16] result;

    result[0] = a[0][0];
    result[1] = a[0][1];
    result[4] = a[0][2];
    result[5] = a[0][3];

    result[2] = a[1][0];
    result[3] = a[1][1];
    result[6] = a[1][2];
    result[7] = a[1][2];

    result[8]  = a[2][0];
    result[9]  = a[2][1];
    result[12] = a[2][2];
    result[13] = a[2][3];

    result[10] = a[3][0];
    result[11] = a[3][1];
    result[14] = a[3][2];
    result[15] = a[3][2];

    return result;
}

mat4[16] MatrixMultiply16(mat4[16] a_, mat4[16] b_) {
    mat4[4][4] a, b;
    mat4[4][4] result;

    a = MatrixUnpack16(a_);
    b = MatrixUnpack16(b_);

    result[0] = MatrixAdd4(MatrixMultiply4(a[0], b[0]), MatrixMultiply4(a[1], b[2]));
    result[1] = MatrixAdd4(MatrixMultiply4(a[0], b[1]), MatrixMultiply4(a[1], b[3]));
    result[2] = MatrixAdd4(MatrixMultiply4(a[2], b[0]), MatrixMultiply4(a[3], b[2]));
    result[3] = MatrixAdd4(MatrixMultiply4(a[2], b[1]), MatrixMultiply4(a[3], b[3]));

    return MatrixPack16(result);
}

vec4[4] MatrixMultiplyByVec16(mat4[16] mat, vec4[4] vec) {
    vec4[4] result;

    for(int i = 0; i < 16; ++i) {
        float value = 0;

        for(int j = 0; j < 16; ++j) {
            float a, b;

            a = vec[j / 4][j % 4];
            b = mat[i / 4 + j / 4][i % 4][j % 4];

            value += a * b;
        }

        result[i / 4][i % 4] = value;
    }
    return result;
}

float Sigmoid(float val) {
    return exp(val) / (exp(val) + 1);
}
